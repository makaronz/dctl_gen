DEFINE_UI_PARAMS(focal_length, Focal Length, DCTLUI_SLIDER_FLOAT, 50.0, 0.0, 300.0, 5)
DEFINE_UI_PARAMS(film_base_thickness, Film Base Thickness, DCTLUI_SLIDER_FLOAT, 0.18, 0.00, 0.5, 0.01)
DEFINE_UI_PARAMS(exposure_lost, Reflection exposure lost, DCTLUI_SLIDER_FLOAT, -1.0, -10.0, 0.0, 0.1)
DEFINE_UI_PARAMS(green_exposure_lost, Green exposure lost, DCTLUI_SLIDER_FLOAT, -1.4, -10.0, 0.0, 0.1)
DEFINE_UI_PARAMS(blue_exposure_lost, Blue exposure lost, DCTLUI_SLIDER_FLOAT, -1.4, -10.0, 0.0, 0.1)
DEFINE_UI_PARAMS(blur_type, Blur Type, DCTLUI_COMBO_BOX, 3, {NO_BLUR, BOX, TRIANGLE, FAST}, {None, Box Blur, Triangle Blur, Fast Blur})
DEFINE_UI_PARAMS(blur_amt, Blur Amount, DCTLUI_SLIDER_FLOAT, 3.0, 0.0, 30.0, 1.0)
DEFINE_UI_PARAMS(show_halation, Show only halation, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(correct_red_shift, Correct for Red Shift, DCTLUI_CHECK_BOX, 1)
// Halation gamma isn't physically motivated (should be set to 1.0), but this allows
// for creative control over how much halation is added and to suppress
// halation in the shadows.
DEFINE_UI_PARAMS(halation_gamma, Halation gamma, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.01)


__DEVICE__ float powf(float base, float exp) {
    float out = _copysignf(_powf(_fabs(base), exp), base);
    return out;
}

__DEVICE__ int get_coord(float x, int width) {
    return (int)_round((x + 0.5f) * width);
}

__DEVICE__ float get_coord_float(float x, int width) {
    return ((x + 0.5f) * (float)width);
}

__DEVICE__ float3 get_color(int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    float r = _tex2D(p_TexR, p_X, p_Y);
    float g = _tex2D(p_TexG, p_X, p_Y);
    float b = _tex2D(p_TexB, p_X, p_Y);

    return make_float3(r, g, b);
}

__DEVICE__ float3 sample_point_bilinear(float x, float y, int p_Width, int p_Height, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    float f_x = get_coord_float(x, p_Width);
    float f_y = get_coord_float(y, p_Height);

    int x_low = (int)_floor(f_x);
    int x_high = (int)_ceil(f_x);
    int y_low = (int)_floor(f_y);
    int y_high = (int)_ceil(f_y);

    float3 c_ll = get_color(x_low, y_low, p_TexR, p_TexG, p_TexB);
    float3 c_lh = get_color(x_low, y_high, p_TexR, p_TexG, p_TexB);
    float3 c_hl = get_color(x_high, y_low, p_TexR, p_TexG, p_TexB);
    float3 c_hh = get_color(x_high, y_high, p_TexR, p_TexG, p_TexB);

    float mix_x = f_x - x_low; // y_high - y_low guaranteed to be 1.
    float mix_y = f_y - y_low;

    float3 c_l = _mix(c_ll, c_hl, mix_x);
    float3 c_h = _mix(c_lh, c_hh, mix_x);
    float3 c = _mix(c_l, c_h, mix_y);
    return c;
}


__DEVICE__ float3 sample_point_nearest(float x, float y, int p_Width, int p_Height, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    float f_x = get_coord_float(x, p_Width);
    float f_y = get_coord_float(y, p_Height);

    int p_x = (int)_round(f_x);
    int p_y = (int)_round(f_y);

    float3 c = get_color(p_x, p_y, p_TexR, p_TexG, p_TexB);
    return c;
}

__DEVICE__ float3 box_blur(int boxsize, float x, float y, int p_Width, int p_Height, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {

    float3 curr_val = make_float3(0.0f, 0.0f, 0.0f);
    for (float i = 0.0f; i < boxsize; i++) {
        for (float j = 0.0f; j < boxsize; j++) {
            float curr_offset_x = x + ((i - boxsize * 0.5f) / p_Width);
            float curr_offset_y = y + ((j - boxsize * 0.5f) / p_Height);

            float curr_weight = 1.0f / ((float)boxsize * (float)boxsize);

            curr_val = curr_val + curr_weight * sample_point_nearest(curr_offset_x, curr_offset_y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
        }
    }

    return curr_val;
}

__DEVICE__ float3 triangle_blur(int boxsize, float x, float y, int p_Width, int p_Height, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {

    float3 curr_val = make_float3(0.0f, 0.0f, 0.0f);
    float total_weights = 0.0f;
    for (float i = 0.0f; i < boxsize; i++) {
        for (float j = 0.0f; j < boxsize; j++) {
            float curr_offset_x = x + ((i - boxsize * 0.5f) / p_Width);
            float curr_offset_y = y + ((j - boxsize * 0.5f) / p_Height);

            float curr_weight = (boxsize + 1 - (_fabs(i + 0.5f - boxsize * 0.5f) + _fabs(j + 0.5f - boxsize * 0.5f))) * 0.5f;
            curr_weight = _fmaxf(curr_weight, 0.0f);
            total_weights += curr_weight;

            curr_val = curr_val + curr_weight * sample_point_nearest(curr_offset_x, curr_offset_y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
        }
    }
    curr_val /= total_weights;

    return curr_val;
}

__DEVICE__ float3 fast_blur(int boxsize, float x, float y, int p_Width, int p_Height, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {

    float3 curr_val = make_float3(0.0f, 0.0f, 0.0f);
    float half_boxsize_x = boxsize * 0.5f / p_Width;
    float half_boxsize_y = boxsize * 0.5f / p_Height;

    curr_val += sample_point_bilinear(x - half_boxsize_x, y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    curr_val += sample_point_bilinear(x + half_boxsize_x, y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    curr_val += sample_point_bilinear(x, y - half_boxsize_y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    curr_val += sample_point_bilinear(x, y + half_boxsize_y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    curr_val += sample_point_bilinear(x - half_boxsize_x, y - half_boxsize_y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    curr_val += sample_point_bilinear(x + half_boxsize_x, y - half_boxsize_y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    curr_val += sample_point_bilinear(x - half_boxsize_x, y + half_boxsize_y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    curr_val += sample_point_bilinear(x + half_boxsize_x, y + half_boxsize_y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    curr_val += sample_point_bilinear(x, y, p_Width, p_Height, p_TexR, p_TexG, p_TexB);

    curr_val /= 9.0f;
    return curr_val;
}

__DEVICE__ float convert_gamma(float g) {
    // Converts -1 to +1 range to an exponent
    // Essentially what Resolve does with its gamma
    // correction.
    float out;
    if (g <= 0) {
        out = 1.0f + (-4.0f * g);
    } else {
        out = 1.0f / (4.0f * g + 1);
    }
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{

    float X = (float) p_X / (float)p_Width - 0.5f;
    float Y = (float) p_Y / (float)p_Height - 0.5f;

    float scale = focal_length / (focal_length + 2.0f * film_base_thickness);
    float exposure_lost_lin = _exp2f(exposure_lost);
    float green_exposure_lost_lin = _exp2f(green_exposure_lost);
    float blue_exposure_lost_lin = _exp2f(blue_exposure_lost);
    float adjusted_gamma_value = convert_gamma(halation_gamma);
    int blur_radius = (int)_round((blur_amt / 1000.0f) * p_Width);

    float3 scale_color;
    if (blur_type == BOX){
        scale_color = box_blur(blur_radius, X * scale, Y * scale, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    } else if (blur_type == TRIANGLE){
        scale_color = triangle_blur(blur_radius, X * scale, Y * scale, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    } else if (blur_type == FAST){
        scale_color = fast_blur(blur_radius, X * scale, Y * scale, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    } else if (blur_type == NO_BLUR) {
        scale_color = sample_point_bilinear(X * scale, Y * scale, p_Width, p_Height, p_TexR, p_TexG, p_TexB);
    }

    float3 curr_color;
    if (show_halation) {
        curr_color = make_float3(0.0f, 0.0f, 0.0f);
    } else {
        curr_color = get_color(p_X, p_Y, p_TexR, p_TexG, p_TexB);
    }

    // Red channel re-exposes red channel after bouncing, then
    // it might go far enough as to hit the green channel after passing through
    // the red layer again.
    if (correct_red_shift) {
        // The same modeled physical process as below, but I've applied a white balance to avoid color shifting
        // the whole frame.
        float a = exposure_lost_lin;
        float b = exposure_lost_lin * green_exposure_lost_lin;
        float c = exposure_lost_lin * green_exposure_lost_lin * blue_exposure_lost_lin;
        curr_color.x += powf((scale_color.x - curr_color.x) * (a / (a + 1)), adjusted_gamma_value);
        curr_color.y += powf((scale_color.x - curr_color.y) * (b / (a + 1)), adjusted_gamma_value);
        curr_color.z += powf((scale_color.x - curr_color.z) * (c / (a + 1)), adjusted_gamma_value);
    } else {
        // The modeled physical process:
        // C_out = C_in + (red_scaled_blurred * exp)
        curr_color.x += powf(scale_color.x * exposure_lost_lin, adjusted_gamma_value);
        curr_color.y += powf(scale_color.x * exposure_lost_lin * green_exposure_lost_lin, adjusted_gamma_value);
        curr_color.z += powf(scale_color.x * exposure_lost_lin * green_exposure_lost_lin * blue_exposure_lost_lin, adjusted_gamma_value);
    }

    return curr_color;
}

